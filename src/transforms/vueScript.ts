import { Transform } from 'vite'
import Debug from 'debug'
import { Context } from '../context'
import { RESOLVER_EXT } from '../constants'
import { relative } from '../utils'

const debug = Debug('vite-plugin-components:transform:script')

/**
 * This transfomer inject a resolver to the script in a SFC.
 * The resolver is generated in `generator/resolver.ts`
 *
 * @param ctx
 */
export function VueScriptTransformer(ctx: Context): Transform {
  return {
    test({ path, query }) {
      return path.endsWith('.vue') && !query.type
    },
    transform({ code, path, isBuild }) {
      const filepath = relative(path)
      debug(filepath)
      const lines = code.split('\n')

      // tail is the export expression, should insert before it
      const tail = lines.pop()!

      const entry = isBuild ? 'script' : '__script'

      // import a component resolver which is generated by the plugin
      lines.push(
        `import __components from "/${filepath}${RESOLVER_EXT}"`,
        `${entry}.components = __components(${entry}.components)`,
        tail,
      )

      return lines.join('\n')
    },
  }
}

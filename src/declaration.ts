import { resolve, dirname, relative } from 'path'
import { promises as fs } from 'fs'
import { notNullish } from '@antfu/utils'
import { Context } from './context'
import { slash } from './utils'

export async function generateDeclaration(ctx: Context, root: string, filepath: string) {
  const lines = Object.values({
    ...ctx.componentNameMap,
    ...ctx.componentCustomMap,
  })
    .map(({ path, name, importName }) => {
      if (!name)
        return undefined

      const related = slash(path).startsWith('/')
        ? `./${relative(dirname(filepath), resolve(root, path.slice(1)))}`
        : path

      if (!/^\w+$/.test(name))
        name = `'${name}'`

      let entry = `${name}: typeof import('${slash(related)}')`
      if (importName)
        entry += `['${importName}']`
      else
        entry += '[\'default\']'
      return entry
    })
    .filter(notNullish)

  if (!lines.length)
    return

  const code = `// generated by vite-plugin-components
// read more https://github.com/vuejs/vue-next/pull/3399

declare module 'vue' {
  export interface GlobalComponents {
    ${lines.join('\n    ')}
  }
}

export { }
`
  await fs.writeFile(filepath, code, 'utf-8')
}
